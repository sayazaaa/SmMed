/**
 * SmMed
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "DefaultApiHandler.h"
#include "DefaultApiRequest.h"
#include "global.h"
namespace HttpServer {

DefaultApiHandler::DefaultApiHandler(){

}

DefaultApiHandler::~DefaultApiHandler(){

}

void DefaultApiHandler::loginPost(QString id, QString password, bool usertype, QString apikey, Object body) {
    Q_UNUSED(apikey);
    Q_UNUSED(body);
    qDebug() << "default api handler login post:" << usertype;
    auto reqObj = qobject_cast<DefaultApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        QSharedPointer<QJsonDocument> jsondoc;
        Inline_response_200 res;
        try {
            jsondoc = usertype?dbserver->verify_userpassword(id,password):dbserver->verify_doctorpassword(id,password);
        } catch (std::exception e) {
            QString error_str = "login failed!";
            reqObj->loginPostError(res,QNetworkReply::NetworkError::UnknownNetworkError,error_str);
            return;
        }
        qDebug() << "going to send result...";
        //res.fromJson(jsondoc->toJson());
        res = Inline_response_200(jsondoc->toJson());
        reqObj->loginPostResponse(res);
        qDebug() << "send succeed";
    }
}
void DefaultApiHandler::sqlGet(QString sql, QString apikey, QString id, bool usertype) {
    Q_UNUSED(usertype)
    qDebug() << "get sql query!" << endl << sql;
    auto reqObj = qobject_cast<DefaultApiRequest*>(sender());
    QSharedPointer<QJsonDocument> resjson;
    try {
        if(apiVerifyMap[apikey].first != id){
            std::exception e;
            throw e;
        }
        std::string sqlstd = sql.toStdString();
        dbserver->sqlquery(&sqlstd,resjson);
        std::string s = sqlstd.substr(0,6);
        for(size_t i = 0; i < s.length();i++)s[i] = toupper(s[i]);
        if(s != "SELECT"){
            QJsonObject obj = resjson->object();
            if(!obj["id"].toString().size()){
                obj["id"] = id;
            }
            resjson = QSharedPointer<QJsonDocument>(new QJsonDocument(obj));
        }
    } catch (std::exception e) {
        if(reqObj != nullptr){
            Object res;
            QString error_str = "SQL ERROR!";
            reqObj->sqlGetError(res,QNetworkReply::NetworkError::UnknownNetworkError,error_str);
        }

        return;
    }

    if( reqObj != nullptr )
    {
        qDebug() << "going to send result...";
        qDebug() << (*resjson);
        Object obj(resjson->toJson());
        reqObj->sqlGetResponse(obj);
        qDebug() << "send succeed!";
    }
}


}
