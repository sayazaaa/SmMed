/**
 * SmMed
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Inline_response_200_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace HttpServer {

Inline_response_200_data::Inline_response_200_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Inline_response_200_data::Inline_response_200_data() {
    this->initializeModel();
}

Inline_response_200_data::~Inline_response_200_data() {}

void Inline_response_200_data::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void Inline_response_200_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Inline_response_200_data::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::HttpServer::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_title_isValid = ::HttpServer::fromJsonValue(title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_content_isValid = ::HttpServer::fromJsonValue(content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_time_isValid = ::HttpServer::fromJsonValue(time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString Inline_response_200_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Inline_response_200_data::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::HttpServer::toJsonValue(id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::HttpServer::toJsonValue(title));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::HttpServer::toJsonValue(content));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::HttpServer::toJsonValue(time));
    }
    return obj;
}

qint32 Inline_response_200_data::getId() const {
    return id;
}
void Inline_response_200_data::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool Inline_response_200_data::is_id_Set() const{
    return m_id_isSet;
}

bool Inline_response_200_data::is_id_Valid() const{
    return m_id_isValid;
}

QString Inline_response_200_data::getTitle() const {
    return title;
}
void Inline_response_200_data::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

bool Inline_response_200_data::is_title_Set() const{
    return m_title_isSet;
}

bool Inline_response_200_data::is_title_Valid() const{
    return m_title_isValid;
}

QString Inline_response_200_data::getContent() const {
    return content;
}
void Inline_response_200_data::setContent(const QString &content) {
    this->content = content;
    this->m_content_isSet = true;
}

bool Inline_response_200_data::is_content_Set() const{
    return m_content_isSet;
}

bool Inline_response_200_data::is_content_Valid() const{
    return m_content_isValid;
}

QString Inline_response_200_data::getTime() const {
    return time;
}
void Inline_response_200_data::setTime(const QString &time) {
    this->time = time;
    this->m_time_isSet = true;
}

bool Inline_response_200_data::is_time_Set() const{
    return m_time_isSet;
}

bool Inline_response_200_data::is_time_Valid() const{
    return m_time_isValid;
}

bool Inline_response_200_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Inline_response_200_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_title_isValid && m_content_isValid && m_time_isValid && true;
}

} // namespace HttpServer
