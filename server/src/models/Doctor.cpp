/**
 * SmMed
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Doctor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace HttpServer {

Doctor::Doctor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Doctor::Doctor() {
    this->initializeModel();
}

Doctor::~Doctor() {}

void Doctor::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_office_isSet = false;
    m_office_isValid = false;

    m_zc_isSet = false;
    m_zc_isValid = false;

    m_describe_isSet = false;
    m_describe_isValid = false;
}

void Doctor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Doctor::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::HttpServer::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_password_isValid = ::HttpServer::fromJsonValue(password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_name_isValid = ::HttpServer::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_gender_isValid = ::HttpServer::fromJsonValue(gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_office_isValid = ::HttpServer::fromJsonValue(office, json[QString("office")]);
    m_office_isSet = !json[QString("office")].isNull() && m_office_isValid;

    m_zc_isValid = ::HttpServer::fromJsonValue(zc, json[QString("zc")]);
    m_zc_isSet = !json[QString("zc")].isNull() && m_zc_isValid;

    m_describe_isValid = ::HttpServer::fromJsonValue(describe, json[QString("describe")]);
    m_describe_isSet = !json[QString("describe")].isNull() && m_describe_isValid;
}

QString Doctor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Doctor::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::HttpServer::toJsonValue(id));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::HttpServer::toJsonValue(password));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::HttpServer::toJsonValue(name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::HttpServer::toJsonValue(gender));
    }
    if (m_office_isSet) {
        obj.insert(QString("office"), ::HttpServer::toJsonValue(office));
    }
    if (m_zc_isSet) {
        obj.insert(QString("zc"), ::HttpServer::toJsonValue(zc));
    }
    if (m_describe_isSet) {
        obj.insert(QString("describe"), ::HttpServer::toJsonValue(describe));
    }
    return obj;
}

QString Doctor::getId() const {
    return id;
}
void Doctor::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool Doctor::is_id_Set() const{
    return m_id_isSet;
}

bool Doctor::is_id_Valid() const{
    return m_id_isValid;
}

QString Doctor::getPassword() const {
    return password;
}
void Doctor::setPassword(const QString &password) {
    this->password = password;
    this->m_password_isSet = true;
}

bool Doctor::is_password_Set() const{
    return m_password_isSet;
}

bool Doctor::is_password_Valid() const{
    return m_password_isValid;
}

QString Doctor::getName() const {
    return name;
}
void Doctor::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool Doctor::is_name_Set() const{
    return m_name_isSet;
}

bool Doctor::is_name_Valid() const{
    return m_name_isValid;
}

QString Doctor::getGender() const {
    return gender;
}
void Doctor::setGender(const QString &gender) {
    this->gender = gender;
    this->m_gender_isSet = true;
}

bool Doctor::is_gender_Set() const{
    return m_gender_isSet;
}

bool Doctor::is_gender_Valid() const{
    return m_gender_isValid;
}

QString Doctor::getOffice() const {
    return office;
}
void Doctor::setOffice(const QString &office) {
    this->office = office;
    this->m_office_isSet = true;
}

bool Doctor::is_office_Set() const{
    return m_office_isSet;
}

bool Doctor::is_office_Valid() const{
    return m_office_isValid;
}

QString Doctor::getZc() const {
    return zc;
}
void Doctor::setZc(const QString &zc) {
    this->zc = zc;
    this->m_zc_isSet = true;
}

bool Doctor::is_zc_Set() const{
    return m_zc_isSet;
}

bool Doctor::is_zc_Valid() const{
    return m_zc_isValid;
}

QString Doctor::getDescribe() const {
    return describe;
}
void Doctor::setDescribe(const QString &describe) {
    this->describe = describe;
    this->m_describe_isSet = true;
}

bool Doctor::is_describe_Set() const{
    return m_describe_isSet;
}

bool Doctor::is_describe_Valid() const{
    return m_describe_isValid;
}

bool Doctor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_describe_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Doctor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_password_isValid && m_name_isValid && m_gender_isValid && m_office_isValid && m_zc_isValid && m_describe_isValid && true;
}

} // namespace HttpServer
