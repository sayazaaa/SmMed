/**
 * SmMed
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _FileApiRequest_H
#define _FileApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "HttpFileElement.h"
#include "Inline_response_200_3.h"
#include "Object.h"
#include <QString>
#include "FileApiHandler.h"
#include <QThread>

namespace HttpServer {

class FileApiRequest : public QObject
{
    Q_OBJECT

public:
    FileApiRequest(QHttpEngine::Socket *s, QSharedPointer<FileApiHandler> handler);
    virtual ~FileApiRequest();

    void fileGetRequest();
    void filePostRequest();
    

    // void fileGetResponse(const Object& res);
    void fileGetResponse(const QByteArray& res);
    void filePostResponse(const Inline_response_200_3& res);
    

    void fileGetError(const Object& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void filePostError(const Inline_response_200_3& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void fileGet(QString uuid, QString apikey);
    void filePost(QString name, QString doctor_id, QString patient_id, QString type, QString apikey, QString appointment_id, HttpFileElement body);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<FileApiHandler> handler;

    inline void writeResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
        socket->writeHeaders();
    }
};

}

#endif // _FileApiRequest_H
