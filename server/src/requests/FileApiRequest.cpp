/**
 * SmMed
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "Helpers.h"
#include "FileApiRequest.h"

namespace HttpServer {

FileApiRequest::FileApiRequest(QHttpEngine::Socket *s, QSharedPointer<FileApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

FileApiRequest::~FileApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "FileApiRequest::~FileApiRequest()";
}

QMap<QString, QString>
FileApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void FileApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* FileApiRequest::getRawSocket(){
    return socket;
}


void FileApiRequest::fileGetRequest(){
    qDebug() << "/file";
    connect(this, &FileApiRequest::fileGet, handler.data(), &FileApiHandler::fileGet);

    
    QString uuid;
    if(socket->queryString().keys().contains("uuid")){
        fromStringValue(socket->queryString().value("uuid"), uuid);
    }
    
    QString apikey;
    if(socket->queryString().keys().contains("apikey")){
        fromStringValue(socket->queryString().value("apikey"), apikey);
    }
    


    emit fileGet(uuid, apikey);
}


void FileApiRequest::filePostRequest(){
    qDebug() << "/file";
    connect(this, &FileApiRequest::filePost, handler.data(), &FileApiHandler::filePost);

    
    QString name;
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString doctor_id;
    if(socket->queryString().keys().contains("doctor_id")){
        fromStringValue(socket->queryString().value("doctor_id"), doctor_id);
    }
    
    QString patient_id;
    if(socket->queryString().keys().contains("patient_id")){
        fromStringValue(socket->queryString().value("patient_id"), patient_id);
    }
    
    QString type;
    if(socket->queryString().keys().contains("type")){
        fromStringValue(socket->queryString().value("type"), type);
    }
    
    QString apikey;
    if(socket->queryString().keys().contains("apikey")){
        fromStringValue(socket->queryString().value("apikey"), apikey);
    }
    
    QString appointment_id;
    if(socket->queryString().keys().contains("appointment_id")){
        fromStringValue(socket->queryString().value("appointment_id"), appointment_id);
    }
    
 
    
    HttpFileElement body;
    ::HttpServer::fromStringValue(QString(socket->readAll()), body);
    
    

    emit filePost(name, doctor_id, patient_id, type, apikey, appointment_id, body);
}



void FileApiRequest::fileGetResponse(const Object& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void FileApiRequest::filePostResponse(const Inline_response_200_3& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void FileApiRequest::fileGetError(const Object& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type);
    Q_UNUSED(res);
    socket->writeError(404,error_str.toStdString().c_str());
    if(socket->isOpen()){
        socket->close();
    }
}

void FileApiRequest::filePostError(const Inline_response_200_3& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type);
    Q_UNUSED(res);
    socket->writeError(404,error_str.toStdString().c_str());
    if(socket->isOpen()){
        socket->close();
    }
}


void FileApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }    
}

void FileApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
