/**
 * SmMed
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _AppointmentApiRequest_H
#define _AppointmentApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "Inline_object_4.h"
#include "Inline_response_200_11.h"
#include "Inline_response_200_12.h"
#include "Object.h"
#include <QString>
#include "AppointmentApiHandler.h"

namespace HttpServer {

class AppointmentApiRequest : public QObject
{
    Q_OBJECT

public:
    AppointmentApiRequest(QHttpEngine::Socket *s, QSharedPointer<AppointmentApiHandler> handler);
    virtual ~AppointmentApiRequest();

    void appointmentDoctorGetRequest();
    void appointmentIdDeleteRequest(const QString& id);
    void appointmentPatientGetRequest();
    void appointmentPostRequest();
    

    void appointmentDoctorGetResponse(const Inline_response_200_11& res);
    void appointmentIdDeleteResponse(const Object& res);
    void appointmentPatientGetResponse(const Inline_response_200_11& res);
    void appointmentPostResponse(const Inline_response_200_12& res);
    

    void appointmentDoctorGetError(const Inline_response_200_11& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void appointmentIdDeleteError(const Object& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void appointmentPatientGetError(const Inline_response_200_11& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void appointmentPostError(const Inline_response_200_12& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void appointmentDoctorGet(QString doctor_id, qint32 office);
    void appointmentIdDelete(QString id);
    void appointmentPatientGet(qint32 patient_id, qint32 office);
    void appointmentPost(Inline_object_4 inline_object_4);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<AppointmentApiHandler> handler;

    inline void writeResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
        socket->writeHeaders();
    }
};

}

#endif // _AppointmentApiRequest_H
