/**
 * SmMed
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "Helpers.h"
#include "DefaultApiRequest.h"

namespace HttpServer {

DefaultApiRequest::DefaultApiRequest(QHttpEngine::Socket *s, QSharedPointer<DefaultApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

DefaultApiRequest::~DefaultApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "DefaultApiRequest::~DefaultApiRequest()";
}

QMap<QString, QString>
DefaultApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void DefaultApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* DefaultApiRequest::getRawSocket(){
    return socket;
}


void DefaultApiRequest::loginPostRequest(){
    qDebug() << "/login";
    connect(this, &DefaultApiRequest::loginPost, handler.data(), &DefaultApiHandler::loginPost);

    
    QString id;
    if(socket->queryString().keys().contains("id")){
        fromStringValue(socket->queryString().value("id"), id);
    }
    
    QString password;
    if(socket->queryString().keys().contains("password")){
        fromStringValue(socket->queryString().value("password"), password);
    }
    
 
    
    Object body;
    QJsonDocument resObject = QJsonDocument::fromJson(socket->readAll());
    ::HttpServer::fromJsonValue(body, resObject.object());
    

    emit loginPost(id, password, body);
}


void DefaultApiRequest::notificationsGetRequest(){
    qDebug() << "/notifications";
    connect(this, &DefaultApiRequest::notificationsGet, handler.data(), &DefaultApiHandler::notificationsGet);

    

    QString date;
    if(socket->headers().keys().contains("date")){
        fromStringValue(socket->queryString().value("date"), date);
    }
    

    emit notificationsGet(date);
}


void DefaultApiRequest::officeIdGetRequest(const QString& idstr){
    qDebug() << "/office/{id}";
    connect(this, &DefaultApiRequest::officeIdGet, handler.data(), &DefaultApiHandler::officeIdGet);

    
    qint32 id;
    fromStringValue(idstr, id);
    

    emit officeIdGet(id);
}



void DefaultApiRequest::loginPostResponse(const Inline_response_200_2& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void DefaultApiRequest::notificationsGetResponse(const Inline_response_200& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void DefaultApiRequest::officeIdGetResponse(const Inline_response_200_4& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void DefaultApiRequest::loginPostError(const Inline_response_200_2& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void DefaultApiRequest::notificationsGetError(const Inline_response_200& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void DefaultApiRequest::officeIdGetError(const Inline_response_200_4& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void DefaultApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }    
}

void DefaultApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
