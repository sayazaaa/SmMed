/**
 * SmMed
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "Helpers.h"
#include "AppointmentApiRequest.h"

namespace HttpServer {

AppointmentApiRequest::AppointmentApiRequest(QHttpEngine::Socket *s, QSharedPointer<AppointmentApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

AppointmentApiRequest::~AppointmentApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "AppointmentApiRequest::~AppointmentApiRequest()";
}

QMap<QString, QString>
AppointmentApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void AppointmentApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* AppointmentApiRequest::getRawSocket(){
    return socket;
}


void AppointmentApiRequest::appointmentDoctorGetRequest(){
    qDebug() << "/appointment/doctor";
    connect(this, &AppointmentApiRequest::appointmentDoctorGet, handler.data(), &AppointmentApiHandler::appointmentDoctorGet);

    
    QString doctor_id;
    if(socket->queryString().keys().contains("doctor_id")){
        fromStringValue(socket->queryString().value("doctor_id"), doctor_id);
    }
    
    qint32 office;
    if(socket->queryString().keys().contains("office")){
        fromStringValue(socket->queryString().value("office"), office);
    }
    


    emit appointmentDoctorGet(doctor_id, office);
}


void AppointmentApiRequest::appointmentIdDeleteRequest(const QString& idstr){
    qDebug() << "/appointment/{id}";
    connect(this, &AppointmentApiRequest::appointmentIdDelete, handler.data(), &AppointmentApiHandler::appointmentIdDelete);

    
    QString id;
    fromStringValue(idstr, id);
    

    emit appointmentIdDelete(id);
}


void AppointmentApiRequest::appointmentPatientGetRequest(){
    qDebug() << "/appointment/patient";
    connect(this, &AppointmentApiRequest::appointmentPatientGet, handler.data(), &AppointmentApiHandler::appointmentPatientGet);

    
    qint32 patient_id;
    if(socket->queryString().keys().contains("patient_id")){
        fromStringValue(socket->queryString().value("patient_id"), patient_id);
    }
    
    qint32 office;
    if(socket->queryString().keys().contains("office")){
        fromStringValue(socket->queryString().value("office"), office);
    }
    


    emit appointmentPatientGet(patient_id, office);
}


void AppointmentApiRequest::appointmentPostRequest(){
    qDebug() << "/appointment";
    connect(this, &AppointmentApiRequest::appointmentPost, handler.data(), &AppointmentApiHandler::appointmentPost);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    Inline_object_4 inline_object_4;
    ::HttpServer::fromJsonValue(inline_object_4, obj);
    

    emit appointmentPost(inline_object_4);
}



void AppointmentApiRequest::appointmentDoctorGetResponse(const Inline_response_200_11& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void AppointmentApiRequest::appointmentIdDeleteResponse(const Object& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void AppointmentApiRequest::appointmentPatientGetResponse(const Inline_response_200_11& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void AppointmentApiRequest::appointmentPostResponse(const Inline_response_200_12& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void AppointmentApiRequest::appointmentDoctorGetError(const Inline_response_200_11& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void AppointmentApiRequest::appointmentIdDeleteError(const Object& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void AppointmentApiRequest::appointmentPatientGetError(const Inline_response_200_11& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void AppointmentApiRequest::appointmentPostError(const Inline_response_200_12& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::HttpServer::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void AppointmentApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }    
}

void AppointmentApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
